<?php

namespace App\Notifications;

use Illuminate\Bus\Queueable;
use Illuminate\Contracts\Queue\ShouldQueue;
use Illuminate\Notifications\Messages\MailMessage;
use Illuminate\Notifications\Notification;
use Carbon\Carbon;

class UserTemporarilyBannedNotification extends Notification
{
    use Queueable;

    protected $user;

    public function __construct($user)
    {
        $this->user = $user;
    }

    /**
     * Get the notification's delivery channels.
     *
     * @return array<int, string>
     */
    public function via(object $notifiable): array
    {
        return ['mail'];
    }

    public function toMail($notifiable)
    {
        $expiryDate = Carbon::parse($this->user->temporary_ban_expires_at)->format('M d, Y \a\t g:i A');

        $mail = (new MailMessage)
            ->subject('Your Account Has Been Temporarily Suspended')
            ->line('Your account has been temporarily suspended from OrPAWnage.');

        if ($this->user->temporary_ban_reason) {
            $mail->line('Reason: ' . $this->user->temporary_ban_reason);
        }

        $mail->line('Your suspension will be automatically lifted on ' . $expiryDate . '.')
            ->line('During this time, you will not be able to access your account or submit new applications.')
            ->line('If you believe this is a mistake, please contact us at orpawnagedevelopers@gmail.com with your username or registered email.')
            ->action('Contact Support', 'mailto:orpawnagedevelopers@gmail.com');

        return $mail;
    } 

    /**
     * Get the array representation of the notification.
     *
     * @return array<string, mixed>
     */
    public function toArray(object $notifiable): array
    {
        return [
            'user_id' => $this->user->id,
            'temporary_ban_reason' => $this->user->temporary_ban_reason,
            'temporarily_banned_at' => $this->user->temporarily_banned_at,
            'temporary_ban_expires_at' => $this->user->temporary_ban_expires_at,
        ];
    }
}
